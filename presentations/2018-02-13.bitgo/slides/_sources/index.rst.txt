.. Deploying Zcash documentation master file, created by
   sphinx-quickstart on Mon Feb 12 12:55:45 2018.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

=================
 Deploying Zcash
=================

`Nathan Wilcox`

`The Zcash Company`

Overview
========

Outline
-------

.. contents::
   :depth: 2

Why
---

- Privacy is a human right.
- Privacy needs to be constructed at the base layer.
- Permissionlessness and censorship resistance require privacy.

What
----

- a permissionless private cryptocurrency
- derived from Bitcoin design + code
- with zkSNARKs for strong privacy

Who - The Zcash Company
-----------------------

- US for profit company
- founded by leading cryptographers and security engineers
- currently primary Zcash protocol development team
- enterprise arm does non-Zcash projects involving zeroknowledge
  cryptography

Who - The Zcash Foundation
--------------------------

..

  the first public charity dedicated to building internet payments and
  privacy infrastructure for the public good [1]_

- US 501(c)(3)
- Governance
- Zcon0
- Grants (privacy research, partial second implementation, +more) [2]_

.. [1] Quote from https://z.cash.foundation/blog/zcash-foundation-officially-nonprofit/
.. [2] 2017 grant recipients: https://z.cash.foundation/blog/grant-awards/

Who - Community Contributors
----------------------------

Community contributors develop and operate:

- Most full-nodes use community ports, ie: `Zcash4win`
- Block explorers
- Tor infrastructure

A notable subset are pseudonymous.

Who - Industry
--------------

Strong industry support:

- hardware wallet support - `Trezor`, `Ledger`
- exchange support - including 5 direct fiat pairs
- financial institutions - ex: `Zcash Investment Trust`

Integrating Zcash
=================

Integration Phases
------------------

We strongly advise rolling out Zcash support in this order (phases
explained later):

#. `Transparent Address` support only (described later)
#. Protocol Upgrade support
#. `Shielded Address` support - `2.0.x Sapling` and *maybe* `1.0.x Sprout`

Protocol Basics
---------------

Zcash uses the Bitcoin protocol with some modifications:

- proof-of-work: Equihash
- block target time: 150 seconds
- block size limit: 2 MB
- addition of zkSNARK proofs
- ... plus other tweaks to consensus rules.

Addresses
---------

There are two kinds of addresses:

- `Transparent Addresses` aka `t-addrs`, ``t-`` prefix
- `Shielded Addresses` aka `z-addrs`, ``z-`` prefix

T Addresses
-----------

Transparent addresses are literally Bitcoin addresses [3]_, except the
encoding requires they begin with a ``t-`` prefix. The remainder of the
encoding ensures the Bitcoin address classification.

Example: ``t3Vz22vK5z2LcKEdg16Yv4FFneEL1zg9ojd``

This is a t-addr. The initial ``3`` indicates a `P2SH` address.

.. [3] No BECH-32 addresses, currently.

Z Addresses
-----------

Shielded addresses begin with a ``z-`` and use zkSNARK technology.

We recommend deploying support for T Addresses only, initially.

Software
--------

- The primary software is `zcashd`, a source-fork of Bitcoin Core v0.11.2.
- Changes have been relatively conservative. Examples:

  + disabled QT wallet
  + disabled support for platforms we can't audit/test/focus on
  + backporting focused on security, testability, cleanup

API
---

- The primary API is the RPC interface, derived from Bitcoin v0.11.2.
- Most calls are unaltered, except for safety or simplicity.

  + ex: `accounts` feature disabled.

- Many API consumers who support Bitcoin can do "drop-in" Zcash support.

  + ex: `getnewaddress`, `sendmany`, `listunspent`

- Shielded address support is all in new RPC calls with a ``z_`` prefix.

API Changes
-----------

Some Bitcoin RPC calls will be necessarily different. The most prominent
is transaction format and semantics.

If your service or product does transaction parsing, inspection, or
signing for Bitcoin, supporting Zcash is slightly more work.

Transaction Format
------------------

.. code:: C++

    class CTransaction
    {
        // …

        // Bitcoin fields:
        const int32_t nVersion;
        const std::vector<CTxIn> vin;
        const std::vector<CTxOut> vout;
        const uint32_t nLockTime;

        // Zcash specific:
        const std::vector<JSDescription> vjoinsplit;
        const uint256 joinSplitPubKey;
        const joinsplit_sig_t joinSplitSig = {{0}};
        // …
    };

Transaction Parsing
-------------------

If you primarily care about `vin` / `vout`, for example, to track the
balances of addresses, you can ignore the contents of the Zcash fields.

If you need to track fees or global monetary supply, you need to parse
fields within `vjoinsplit`. This is fairly straight forward and Zcash
devs would love to help.

We've created JS libraries, source-forked block explorers, and worked
with wallet makers to do this parsing task.

WARNING: This all assumes you are relying on `zcashd` to validate
transaction consensus rules, which does the work of verifying zkSNARK
proofs.

Zcash Integration Future Work
=============================

Roadmap
-------

- `1.0.x Sprout` - first gen zkSNARKs - 2016-10-28
- `1.1.x Overwinter` - upgrade robustness - 2018 Q3
- `2.0.x Sapling` - second gen zkSNARK - 2018 Q4

Sprout Support
--------------

The `1.0.x Sprout` series is the currently launched "first generation"
protocol. Shielded addresses are resource intensive and have seen modest
adoption.

Supporting `1.0.x Sprout` shielded addresses requires using the ``z_*``
RPC calls, and designing your infrastructure to accommodate the resource
requirements.

Sprout Gotchas
--------------

- Different, non-backwards compatible async APIs.
- ``z_sendmany`` requires ~1.7 GiB RAM and ~35 seconds on my 4 core
  laptop.
- Block indexing time is ``O(T⋅Z)`` with ``T`` transactions and ``Z``
  shielded addresses.

Sapling upgrade will improve both issues drastically.

Overwinter Overview
-------------------

The `1.1.x Overwinter` series introduces a network protocol upgrade
primarily focused on safety for future upgrades.

- Activates 2018 Q3
- The first testnet release comes out next week (2017-02-19)

Features:

- chainsplit replay protection
- transaction expiry by block height
- fixes quadratic cost of ``SIGHASH_ALL`` from Bitcoin (adapted from segwit)
- rollback "circuit breaker" (not consensus, but important)

Overwinter Support
------------------

We recommend this as Phase 2 of Zcash integration rather than `1.0.x
Sprout` support. This puts services and vendors on track for a safe and
smooth `2.0.x Sapling` upgrade.

Primary complexity:

- change to parser
- change to signing and signature verification
- expiration logic and retry UX / behavior from users


Sapling Overview
----------------

The `2.0.x Sapling` upgrade introduces major performance and security
improvements to the zkSNARK layer.

- Activates 2018 Q4
- Testnet release scheduled by June 2018.

Features:

- Proofs in < ~10 seconds and ~40 MiB RAM
- ``O(T)`` indexing for ``T`` transactions with any number of shielded
  addresses
- Smaller shielded addresses with forwards compatibility for new protocol
  upgrades
- Mobile support (not consensus, but important)

Sapling Support
---------------

Early / prototype phase.

- We are exploring the changes to the RPC interface that work best for
  major consumers.
- We are working on mobile platform support.
- There is early work on a separate full node implementation.

Network Upgrades
----------------

Our plan for network upgrades:

- network upgrades alter consensus rules [#]_
- fixed activation height >3 months after production code releases
- `autosenescence` approach to long legacy code tail
- entire ecosystem knows the date/time and users know the activation plan
- which gets called "Zcash" is unambiguously centrally controlled via
  trademark
- alternative chainsplits are possible with strong user protection and
  minimized market disruption

.. [#] Many would call these "hard forks" but "fork" is three-way
       ambiguous (!) and confuses many people.

Comments/Questions?
===================

Summary:

- We advise integrating Bitcoin-layer first
- A "safety" network upgrade is coming, `1.1.x Overwinter`
- Then a second-generation privacy upgrade, `2.0.x Sapling`

Questions/Comments?

email (high latency!) `nathan AT z DOT cash`
